//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Coursework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestApplicationDBContext : DbContext
    {
        public TestApplicationDBContext()
            : base("name=TestApplicationDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administrator> Administrators { get; set; }
        public virtual DbSet<AdministratorsAccount> AdministratorsAccounts { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Confirmation> Confirmations { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<EducationalEstablishment> EducationalEstablishments { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<LoginsPassword> LoginsPasswords { get; set; }
        public virtual DbSet<PossibleAnswer> PossibleAnswers { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Result> Results { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentsAccount> StudentsAccounts { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<TeachersAccount> TeachersAccounts { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<TestsGroup> TestsGroups { get; set; }
        public virtual DbSet<TestsStudent> TestsStudents { get; set; }
    
        public virtual int CheckAuthorization(string login, string password, Nullable<byte> type, ObjectParameter result, ObjectParameter id)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckAuthorization", loginParameter, passwordParameter, typeParameter, result, id);
        }
    
        public virtual int DeleteStudentAccount(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudentAccount", studentIdParameter);
        }
    
        public virtual int ExistsLogin(string login, ObjectParameter result)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExistsLogin", loginParameter, result);
        }
    
        public virtual ObjectResult<GetAllAvailibleTests_Result> GetAllAvailibleTests()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAvailibleTests_Result>("GetAllAvailibleTests");
        }
    
        public virtual ObjectResult<GetAllAvailibleTestsBySubject_Result> GetAllAvailibleTestsBySubject(Nullable<short> subjectId)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAvailibleTestsBySubject_Result>("GetAllAvailibleTestsBySubject", subjectIdParameter);
        }
    
        public virtual ObjectResult<GetAllSubjects_Result> GetAllSubjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSubjects_Result>("GetAllSubjects");
        }
    
        public virtual int GetConfirmation(Nullable<int> teacherId, ObjectParameter diploma, ObjectParameter passport, ObjectParameter fromWork)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetConfirmation", teacherIdParameter, diploma, passport, fromWork);
        }
    
        public virtual ObjectResult<GetInfoAboutStudentProfile_Result> GetInfoAboutStudentProfile(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInfoAboutStudentProfile_Result>("GetInfoAboutStudentProfile", studentIdParameter);
        }
    
        public virtual ObjectResult<GetPossibleAnswersForQuestion_Result> GetPossibleAnswersForQuestion(Nullable<long> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPossibleAnswersForQuestion_Result>("GetPossibleAnswersForQuestion", questionIdParameter);
        }
    
        public virtual ObjectResult<GetQuestionsForTest_Result> GetQuestionsForTest(Nullable<long> testId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuestionsForTest_Result>("GetQuestionsForTest", testIdParameter);
        }
    
        public virtual ObjectResult<GetResultsByStudentId_Result> GetResultsByStudentId(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResultsByStudentId_Result>("GetResultsByStudentId", studentIdParameter);
        }
    
        public virtual ObjectResult<GetTestsByRequest_Result> GetTestsByRequest(string request)
        {
            var requestParameter = request != null ?
                new ObjectParameter("Request", request) :
                new ObjectParameter("Request", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTestsByRequest_Result>("GetTestsByRequest", requestParameter);
        }
    
        public virtual ObjectResult<GetTestsForGroup_Result> GetTestsForGroup(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTestsForGroup_Result>("GetTestsForGroup", studentIdParameter);
        }
    
        public virtual ObjectResult<GetTestsForStudent_Result> GetTestsForStudent(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTestsForStudent_Result>("GetTestsForStudent", studentIdParameter);
        }
    
        public virtual int InsertIntoStudents(string login, string password, string name, string surname, ObjectParameter id)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoStudents", loginParameter, passwordParameter, nameParameter, surnameParameter, id);
        }
    
        public virtual int InsertIntoTeachers(string login, string password, string name, string surname, byte[] diplomaPhoto, byte[] passportPhoto, byte[] fromWork, string educationalEstablishment, ObjectParameter id)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var diplomaPhotoParameter = diplomaPhoto != null ?
                new ObjectParameter("DiplomaPhoto", diplomaPhoto) :
                new ObjectParameter("DiplomaPhoto", typeof(byte[]));
    
            var passportPhotoParameter = passportPhoto != null ?
                new ObjectParameter("PassportPhoto", passportPhoto) :
                new ObjectParameter("PassportPhoto", typeof(byte[]));
    
            var fromWorkParameter = fromWork != null ?
                new ObjectParameter("FromWork", fromWork) :
                new ObjectParameter("FromWork", typeof(byte[]));
    
            var educationalEstablishmentParameter = educationalEstablishment != null ?
                new ObjectParameter("EducationalEstablishment", educationalEstablishment) :
                new ObjectParameter("EducationalEstablishment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoTeachers", loginParameter, passwordParameter, nameParameter, surnameParameter, diplomaPhotoParameter, passportPhotoParameter, fromWorkParameter, educationalEstablishmentParameter, id);
        }
    
        public virtual int SetConfirmation(Nullable<int> teacherId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetConfirmation", teacherIdParameter);
        }
    
        public virtual int SetTestToGroup(Nullable<long> testId, string groupName)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(long));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetTestToGroup", testIdParameter, groupNameParameter);
        }
    
        public virtual int SetTestToStudent(string login, Nullable<long> testId)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetTestToStudent", loginParameter, testIdParameter);
        }
    }
}
